#########################Automated tests trace#########################

self = <Search.Tests.SimpleSearch.Facets.test_facet_fields.TestFacetFields object at 0x04527A50>
entity_with_test_field = <PyTest.InputTestCriteria.InputTestCriteria.EntityWithField object at 0x03483BF0>
search_api = <Search.Implementation.Contract.search.SearchAPI object at 0x045274D0>

    @pytest.mark.xre_demo
    @params(["MultipleFacetFilters"])
    def test_entity_search_with_multiple_facet_filters(self, entity_with_test_field, search_api):
        if isinstance(entity_with_test_field, EntityWithField):
            entity_type = entity_with_test_field.entity_type
            facets_logical_names = entity_with_test_field.field_name.split(",")
            field_metadata = entity_with_test_field.field_metadata
            term_facet_size = entity_with_test_field.term_facet_size
            search_api.entity_name = entity_type
    
            self.logger.debug(entity_with_test_field.to_str_repr())
    
            try:
                res1_code, res1_text = search_api.send_search_request(
                    request_body=SearchRequest(
                        Size=5,
                        TermFacetSize=term_facet_size
                    ).to_json()
                )
                self.assertSearchResponse(res1_code, res1_text)
                search_response = SearchResponse(json.loads(res1_text))
                filter_apply_history = {}
                count = 0
                while facets_logical_names:
                    count += 1
                    filter_apply_history.setdefault("ApplyFilter{0}".format(count), {})
                    filter_details = {}
    
                    for facet_logical_name in facets_logical_names:
                        filter_details.setdefault(facet_logical_name, {})
                        filter_details[facet_logical_name].setdefault("FacetType", "")
                        filter_details[facet_logical_name].setdefault("FacetMatch", None)
                        filter_details[facet_logical_name].setdefault("MaxCountFilter", {})
    
                        facet_type, facet_match = search_response.get_facet_match_details_by_field_name(
                            facet_logical_name
                        )
    
                        if not facet_match:
                            raise FacetNotFound("Facet with logical name -{0}- not found in search response "
                                                "for entity -{1}-".format(facet_logical_name, entity_type))
    
                        self.assertFacetItemCollectionIsEmpty(
                            facet_match,
                            search_response.total,
                            field_metadata[facet_logical_name]
                        )
    
                        filter_details[facet_logical_name]["FacetType"] = facet_type
                        filter_details[facet_logical_name]["FacetMatch"] = facet_match
    
                        if not facet_match.items:
                            self.logger.warn("Facet item collection is empty for facet - {0} -".format(
                                facet_logical_name))
                            try:
                                filter_details[facet_logical_name]["MaxCountFilter"] = (facet_match.missing,
                                    self._get_facet_match_obj_for_missing_items(facet_match))
                            except Exception:
                                pass
                        else:
                            filter_details[facet_logical_name]["MaxCountFilter"] = facet_match.get_max_count_facet_match()
    
                    if list(filter_details):
                        max_count_filter_name, max_count_filter = self._get_max_from_filter_details(filter_details)
                        filter_apply_history["ApplyFilter{0}".format(count)]["filter_details"] = filter_details
                        filter_apply_history["ApplyFilter{0}".format(count)]["max_count_filter_name"] = max_count_filter_name
                        filter_apply_history["ApplyFilter{0}".format(count)]["max_count_filter"] = max_count_filter
                        filter_apply_history["ApplyFilter{0}".format(count)]["facet_type"] = \
                            filter_details[max_count_filter_name]["FacetType"]
    
                        self.logger.info("Applying filter - {0} -".format(max_count_filter_name))
    
                        facets_logical_names.remove(max_count_filter_name)
    
                        self.logger.info("Test {0} facet:".format(filter_details[max_count_filter_name]["FacetType"]))
                        self.logger.info("Testing facet sample: {0}".format(max_count_filter.to_request_filter_str_repr()))
    
                        search_request = SearchRequest(
                            Size=5,
                            TermFacetSize=term_facet_size
                        )
                        search_api.entity_name = entity_type
    
                        #if count == 1:
                        for filter_name in filter_details:
                            search_request.apply_selected_facet(
                                facet_type=filter_details[filter_name]["FacetType"],
                                selected_facet=filter_details[filter_name]["FacetMatch"].logical_name,
                                mode="append"
                            )
    
                        for applied_filter_name in filter_apply_history:
                            applied_filter = filter_apply_history[applied_filter_name]
                            search_request.add_facet_filters(
                                facet_type=applied_filter["facet_type"],
                                field_name=applied_filter["max_count_filter_name"],
                                filter_collection=applied_filter["max_count_filter"],
                                mode="append"
                            )
    
                        res2_code, res2_text = search_api.send_search_request(
                            request_body=search_request.to_json()
                        )
                        self.assertSearchResponse(res2_code, res2_text)
    
                        search_response = SearchResponse(json.loads(res2_text))
    
                        self.logger.debug("Response Total value: {0}".format(search_response.total))
    
                        self.assertSearchWithFacets(
                            self.es_client,
                            search_api,
                            term_facet_size,
                            max_count_filter_name,
                            filter_details[max_count_filter_name]["FacetType"],
                            max_count_filter,
                            search_response,
                            field_metadata[max_count_filter_name]
                        )
    
                        #
                        #if max_count_filter.count != search_response.total:
                        #    raise FacetCountException("Search-Total value not match to facet count in initial request")
    
                    else:
                        self.logger.warn("Filter -{0}- SKIPPED. There are no valid values for filter".format(
                            facets_logical_names))
                        facets_logical_names = []
            except FacetNotFound, e:
                self.logger.exception(e)
                pytest.fail(e.message)
            except FacetCountException, e:
                self.logger.exception(e)
                if term_facet_size and term_facet_size == sys.maxint:
                    pytest.fail("Facets not working for {0}. Inner assertion: {1}".format(
                        str(entity_with_test_field),
                        e.message
                    ))
                else:
                    pytest.skip(e.message)
            except AssertionError, e:
                self.logger.exception(e)
                pytest.fail("Facets not working for {0}. Inner assertion: {1}".format(
                    str(entity_with_test_field),
>                   e.message
                ))
E               Failed: Facets not working for awx_lease__awx_leaseawx_propertyidawx_property.awx_class,awx_leaseexpirationdate,edgeServiceFields.facetAliases.awx_geozone2id,awx_size. Inner assertion: The checked facets are not marked as checked in the response

C:\EdgeDeployment\FunctionalTests\src\Search\Tests\SimpleSearch\Facets\test_facet_fields.py:279: Failed
-------------------------------- Captured log ---------------------------------
test_facet_fields.py        32 INFO     
Starting test: test_entity_search_with_multiple_facet_filters
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: GET
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/authentication
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'f3fe99178c8a4ab5b967f14bbb68196a', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "GET /xre2113qa.nightly/api/authentication HTTP/1.1" 200 2097
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:00.778000
test_facet_fields.py       145 DEBUG    
---Input data---
test_entity_type=awx_lease
field_name=awx_leaseawx_propertyidawx_property.awx_class,awx_leaseexpirationdate,edgeServiceFields.facetAliases.awx_geozone2id,awx_size
term_facet_size=25
field_metadata={u'awx_size': {'facet_type': 'SimpleFacet', 'metadata': {u'Sort': False, u'Search': False, u'MeasureType': u'Area', u'DisplayName': u'Size', u'Description': u'', u'EdgeNGram': False, u'IsKey': False, u'ReferencesTo': None, u'MixedSearchAlias': None, u'Facet': True, u'Result': True, u'LogicalName': u'awx_size', u'Type': u'Nullable Decimal', u'LatitudeName': None, u'LongitudeName': None}}, u'edgeServiceFields.facetAliases.awx_geozone2id': {'facet_type': 'MixedSearchAlias', 'metadata': {u'Sort': False, u'Search': False, u'MeasureType': u'None', u'DisplayName': u'Market', u'Description': u'Unique identifier for Geography associated with Property.', u'EdgeNGram': False, u'IsKey': False, u'ReferencesTo': None, u'MixedSearchAlias': u'awx_geozone2id', u'LatitudeName': None, u'Facet': True, u'Result': True, 'FacetAlias': [{...}], u'Type': u'EntityReferenceObject', u'LogicalName': 'awx_leaseawx_propertyidawx_property.awx_geozone2id.name', u'LongitudeName': None}}, u'awx_leaseexpirationdate': {'facet_type': 'SimpleFacet', 'metadata': {u'Sort': False, u'Search': False, u'MeasureType': u'None', u'DisplayName': u'Lease Expiration', u'Description': u'Expiration date for the lease.', u'EdgeNGram': False, u'IsKey': False, u'ReferencesTo': None, u'MixedSearchAlias': None, u'Facet': True, u'Result': True, u'LogicalName': u'awx_leaseexpirationdate', u'Type': u'Nullable DateTime', u'LatitudeName': None, u'LongitudeName': None}}, u'awx_leaseawx_propertyidawx_property.awx_class': {'facet_type': 'SimpleFacet', 'metadata': {u'Sort': False, u'Search': False, u'MeasureType': u'None', u'DisplayName': u'Class', u'Description': u'', u'EdgeNGram': False, u'IsKey': False, u'ReferencesTo': None, u'MixedSearchAlias': None, u'LatitudeName': None, u'Facet': True, u'Result': True, u'Type': u'String', u'LogicalName': 'awx_leaseawx_propertyidawx_property.awx_class', u'LongitudeName': None}}}
---------------
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: POST
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/search/awx_lease
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'f3fe99178c8a4ab5b967f14bbb68196a', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
requests_api.py            104 DEBUG    Request body: {"ResultsFormat": null, "From": 0, "SelectedDateTimeFacets": null, "Relations": [], "PinTo": {"lat": -27.47018, "lon": 153.02911}, "NumericFacetFilters": [], "OrderBy": [{"Field": "_score", "IsDescending": "true"}], "GeoPolygonFilters": [], "TermFacetFilters": [], "FieldFilters": [], "GeoDistanceFacetFilters": [], "ScriptFilters": [], "Ids": [], "SelectedNumericFacets": null, "RelationCounts": [], "Options": null, "SelectedTermFacets": null, "DateTimeFacetFilters": [], "TermFacetSize": 25, "SelectedGeoFacets": null, "Query": "*", "Size": 5}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "POST /xre2113qa.nightly/api/search/awx_lease HTTP/1.1" 200 27632
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:02.737000
test_facet_fields.py       188 WARNING  Facet item collection is empty for facet - edgeServiceFields.facetAliases.awx_geozone2id -
test_facet_fields.py       205 INFO     Applying filter - edgeServiceFields.facetAliases.awx_geozone2id -
test_facet_fields.py       209 INFO     Test TermFacets facet:
test_facet_fields.py       210 INFO     Testing facet sample: None
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: POST
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/search/awx_lease
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'f3fe99178c8a4ab5b967f14bbb68196a', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
requests_api.py            104 DEBUG    Request body: {"ResultsFormat": null, "From": 0, "SelectedDateTimeFacets": ["awx_leaseexpirationdate"], "Relations": [], "PinTo": {"lat": -27.47018, "lon": 153.02911}, "NumericFacetFilters": [], "OrderBy": [{"Field": "_score", "IsDescending": "true"}], "GeoPolygonFilters": [], "TermFacetFilters": [{"Items": [null], "LogicalName": "edgeServiceFields.facetAliases.awx_geozone2id"}], "FieldFilters": [], "GeoDistanceFacetFilters": [], "ScriptFilters": [], "Ids": [], "SelectedNumericFacets": ["awx_size"], "RelationCounts": [], "Options": null, "SelectedTermFacets": [{"Name": "edgeServiceFields.facetAliases.awx_geozone2id"}, {"Name": "awx_leaseawx_propertyidawx_property.awx_class"}], "DateTimeFacetFilters": [], "TermFacetSize": 25, "SelectedGeoFacets": null, "Query": "*", "Size": 5}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "POST /xre2113qa.nightly/api/search/awx_lease HTTP/1.1" 200 12678
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:01.890000
test_facet_fields.py       242 DEBUG    Response Total value: 95
test_facet_fields.py       205 INFO     Applying filter - awx_size -
test_facet_fields.py       209 INFO     Test NumericFacets facet:
test_facet_fields.py       210 INFO     Testing facet sample: {u'IsChecked': True, u'Range': {u'To': 21761794.917613443, u'From': 103.21527744000001}}
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: POST
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/search/awx_lease
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'f3fe99178c8a4ab5b967f14bbb68196a', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
requests_api.py            104 DEBUG    Request body: {"ResultsFormat": null, "From": 0, "SelectedDateTimeFacets": ["awx_leaseexpirationdate"], "Relations": [], "PinTo": {"lat": -27.47018, "lon": 153.02911}, "NumericFacetFilters": [{"Items": [{"IsChecked": true, "Range": {"To": 21761794.917613443, "From": 103.21527744000001}}], "LogicalName": "awx_size"}], "OrderBy": [{"Field": "_score", "IsDescending": "true"}], "GeoPolygonFilters": [], "TermFacetFilters": [{"Items": [null], "LogicalName": "edgeServiceFields.facetAliases.awx_geozone2id"}], "FieldFilters": [], "GeoDistanceFacetFilters": [], "ScriptFilters": [], "Ids": [], "SelectedNumericFacets": ["awx_size"], "RelationCounts": [], "Options": null, "SelectedTermFacets": [{"Name": "awx_leaseawx_propertyidawx_property.awx_class"}], "DateTimeFacetFilters": [], "TermFacetSize": 25, "SelectedGeoFacets": null, "Query": "*", "Size": 5}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "POST /xre2113qa.nightly/api/search/awx_lease HTTP/1.1" 200 12738
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:02.417000
test_facet_fields.py       242 DEBUG    Response Total value: 32
test_facet_fields.py       276 ERROR    The checked facets are not marked as checked in the response
Traceback (most recent call last):
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Tests\SimpleSearch\Facets\test_facet_fields.py", line 252, in test_entity_search_with_multiple_facet_filters
    field_metadata[max_count_filter_name]
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Implementation\Assertions\FacetAssertMixin.py", line 50, in assertSearchWithFacets
    result_facet_match
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Implementation\Assertions\FacetAssertMixin.py", line 208, in assertRequestedNumericFacetIsCheched
    assert item.is_checked, "The checked facets are not marked as checked in the response"
AssertionError: The checked facets are not marked as checked in the response
#########################Server error trace#########################
{"index":[],"megs":[]}
