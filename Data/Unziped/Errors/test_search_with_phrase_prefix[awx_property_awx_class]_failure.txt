#########################Automated tests trace#########################

self = <Search.Tests.SimpleSearch.SearchByField.test_search_by_field.TestSearchByField object at 0x04513790>
entity_with_searchable_field = <PyTest.InputTestCriteria.InputTestCriteria.EntityWithField object at 0x03414670>
search_api = <Search.Implementation.Contract.search.SearchAPI object at 0x045131D0>

    @pytest.mark.xre_demo
    @params(["Search,TermFacetLookup"])
    def test_search_with_phrase_prefix(self, entity_with_searchable_field, search_api):
        '''
            This test checks search by particular field with flag phrase prefix. Each entity in search result have to start
            with phrase in particular field
    
            @return:
            '''
        if isinstance(entity_with_searchable_field, EntityWithField):
            #Prepare search_api class
            entity_type = entity_with_searchable_field.entity_type
            field_name = entity_with_searchable_field.field_name
            search_api.entity_name = entity_type
    
            self.logger.debug(entity_with_searchable_field.to_str_repr())
            try:
                random_entity = self.get_random_entity_from_index_for_phrase_filter(entity=entity_type, field_name=field_name) #Prepare random entity from Index
                if not random_entity:
                    raise SkipTestException("There is no record in index with valid value for {0} field".format(field_name))
                query = search_api.get_field_value_from_entity_details(field_name, random_entity)
    
                #Prepare request body
                request_body = search_api.add_field_filter_to_request_body(
                    query=query,
                    fieldname=field_name,
                    append=False,
                    phrase_prefix=True)  #Prepare request body
    
                #Search result
                res_code, res_text = search_api.send_search_request(request_body=request_body)  #Send request
                self.assertSearchResponse(res_code, res_text)
    
                _response_details = json.loads(res_text)
                field_name_parts = field_name.split('.')
                #Count - total number of records in result
                count = len(_response_details["Results"])
                if count <= 0:
                    assert False, "Empty search results received for valid search query value - {0} -".format(query)
                    #Actual count - number of records in the search response which contains query in the particular field
    
                isContain = True
                for result in _response_details['Results']:
                    if bool(self.edge_entity_model[entity_type].IndexSchema.get_field_metadata_by_name(field_name)["Result"]):
                        isContain = search_api.check_search_result_contain_test_value(
                            field_name,
                            result,
                            query,
                            search_pattern="{0}*",
                            match_mode="PhrasePrefix")
                    else:
                        result_id = search_api.get_id_from_entity_details(result)
                        isContain = search_api.check_search_result_contain_test_value(
                            field_name,
                            self.es_client.get_entity_by_id(result_id),
                            query,
                            search_pattern="{0}*",
                            match_mode="PhrasePrefix")
                    assert isContain, \
                        "Search result doesn't contain query string value -{0}- \n {1}".format(query, result)
            except SkipTestException, e:
                self.logger.exception(e)
                pytest.skip("There is no record in index with valid value for {0} field".format(field_name))
            except AssertionError, e:
                self.logger.exception(e)
                pytest.fail("Search by field not working for {0}. Inner assertion: {1}".format(
                    str(entity_with_searchable_field),
                    e.message
                ))
            except Exception, e:
                self.logger.exception(e)
                pytest.fail("Test execution stopped. An error occurred. Inner exception: {0}".format(
>                   e.message
                ))
E               Failed: Test execution stopped. An error occurred. Inner exception: multiple repeat

C:\EdgeDeployment\FunctionalTests\src\Search\Tests\SimpleSearch\SearchByField\test_search_by_field.py:220: Failed
-------------------------------- Captured log ---------------------------------
test_search_by_field.py     30 INFO     
Starting test: test_search_with_phrase_prefix
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: GET
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/authentication
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'f3fe99178c8a4ab5b967f14bbb68196a', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "GET /xre2113qa.nightly/api/authentication HTTP/1.1" 200 2097
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:01.110000
test_search_by_field.py    163 DEBUG    
---Input data---
test_entity_type=awx_property
field_name=awx_class
term_facet_size=None
field_metadata=None
---------------
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly.settings/ValueWithVersion%601/awx_property HTTP/1.1" 200 15232
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly/_search HTTP/1.1" 200 123
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly.settings/ValueWithVersion%601/awx_property HTTP/1.1" 200 15232
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly/_search HTTP/1.1" 200 2355
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: POST
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/search/awx_property
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'f3fe99178c8a4ab5b967f14bbb68196a', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
requests_api.py            104 DEBUG    Request body: {"ResultsFormat": null, "From": 0, "SelectedDateTimeFacets": null, "Relations": [], "PinTo": {"lat": -27.47018, "lon": 153.02911}, "NumericFacetFilters": [], "OrderBy": [{"Field": "_score", "IsDescending": "true"}], "GeoPolygonFilters": [], "TermFacetFilters": [], "FieldFilters": [{"MatchAll": "true", "Query": "A+", "LogicalName": "awx_class", "PhrasePrefix": "false"}], "GeoDistanceFacetFilters": [], "ScriptFilters": [], "Ids": [], "SelectedNumericFacets": null, "RelationCounts": [], "Options": null, "SelectedTermFacets": null, "DateTimeFacetFilters": [], "TermFacetSize": 25, "SelectedGeoFacets": null, "Query": "*", "Size": 25}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "POST /xre2113qa.nightly/api/search/awx_property HTTP/1.1" 200 24066
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:02.460000
test_search_by_field.py    218 ERROR    multiple repeat
Traceback (most recent call last):
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Tests\SimpleSearch\SearchByField\test_search_by_field.py", line 197, in test_search_with_phrase_prefix
    match_mode="PhrasePrefix")
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Implementation\Contract\search.py", line 206, in check_search_result_contain_test_value
    search_pattern.format(value)
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Implementation\Contract\search.py", line 234, in find_value_in_string_by_search_pattern
    pattern = re.compile(search_pattern)
  File "C:\EdgeDeployment\python27\lib\re.py", line 190, in compile
    return _compile(pattern, flags)
  File "C:\EdgeDeployment\python27\lib\re.py", line 242, in _compile
    raise error, v # invalid expression
error: multiple repeat
#########################Server error trace#########################
{"index":[],"megs":[]}
