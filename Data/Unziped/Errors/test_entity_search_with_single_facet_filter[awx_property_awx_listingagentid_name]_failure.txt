#########################Automated tests trace#########################

self = <Search.Tests.SimpleSearch.Facets.test_facet_fields.TestFacetFields object at 0x04395BB0>
entity_with_test_field = <PyTest.InputTestCriteria.InputTestCriteria.EntityWithField object at 0x03EE5BD0>
search_api = <Search.Implementation.Contract.search.SearchAPI object at 0x04395610>

    @pytest.mark.xre_demo
    @params(["SingleFacetFilter"])
    def test_entity_search_with_single_facet_filter(self, entity_with_test_field, search_api):
        if isinstance(entity_with_test_field, EntityWithField):
            entity_type = entity_with_test_field.entity_type
            facet_logical_name = entity_with_test_field.field_name
            field_metadata = entity_with_test_field.field_metadata
            term_facet_size = entity_with_test_field.term_facet_size
    
            search_api.entity_name = entity_type
    
            self.logger.debug(entity_with_test_field.to_str_repr())
    
            try:
                res1_code, res1_text = search_api.send_search_request(
                    request_body=SearchRequest(
                        TermFacetSize=term_facet_size
                    ).to_json()
                )
                self.assertSearchResponse(res1_code, res1_text)
    
                search_response = SearchResponse(json.loads(res1_text))
                facet_type, facet_match = search_response.get_facet_match_details_by_field_name(facet_logical_name)
    
                if not facet_match:
                    raise FacetNotFound("Facet with logical name -{0}- not found in search response"
                                        "for entity -{1}-".format(facet_logical_name, entity_type))
    
                self.assertFacetItemCollectionIsEmpty(
                    facet_match,
                    search_response.total,
                    field_metadata
                )
                test_facet_collection = self._create_test_facet_collection_base_on_facet_match(facet_match)
    
                for test_facet in test_facet_collection:
                    self.logger.info("Testing facet sample: {0}".format(test_facet.to_request_filter_str_repr()))
    
                    search_api.entity_name = entity_type
    
                    search_request_body = SearchRequest(
                        Size=5,
                        TermFacetSize=term_facet_size
                    )
                    search_request_body.add_facet_filters(
                        facet_type,
                        facet_logical_name,
                        test_facet
                    )
    
                    facet_search_resp_code, facet_search_resp_text = search_api.send_search_request(
                        request_body=search_request_body.to_json()
                    )
                    self.assertSearchResponse(
                        facet_search_resp_code,
                        facet_search_resp_text
                    )
    
                    facet_search_response = SearchResponse(json.loads(facet_search_resp_text))
    
                    self.logger.debug("Response Total value: {0}".format(facet_search_response.total))
    
                    self.assertSearchWithFacets(
                        self.es_client,
                        search_api,
                        term_facet_size,
                        facet_logical_name,
                        facet_type,
                        test_facet,
                        facet_search_response,
                        field_metadata
                    )
            except FacetNotFound, e:
                self.logger.exception(e)
                pytest.fail(e.message)
    
            except FacetCountException, e:
                self.logger.exception(e)
                if term_facet_size and term_facet_size == sys.maxint:
                    pytest.fail("Facets not working for {0}. Inner assertion: {1}".format(
                        str(entity_with_test_field),
                        e.message
                    ))
                else:
                    pytest.skip(e.message)
            except AssertionError, e:
                self.logger.exception(e)
                pytest.fail("Facets not working for {0}. Inner assertion: {1}".format(
                    str(entity_with_test_field),
>                   e.message
                ))
E               Failed: Facets not working for awx_property__awx_listingagentid.name. Inner assertion:

C:\EdgeDeployment\FunctionalTests\src\Search\Tests\SimpleSearch\Facets\test_facet_fields.py:124: Failed
-------------------------------- Captured log ---------------------------------
test_facet_fields.py        32 INFO     
Starting test: test_entity_search_with_single_facet_filter
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: GET
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/authentication
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'25a905dede6f4f3599d0edad49031154', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "GET /xre2113qa.nightly/api/authentication HTTP/1.1" 200 2097
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:01.065000
test_facet_fields.py        46 DEBUG    
---Input data---
test_entity_type=awx_property
field_name=awx_listingagentid.name
term_facet_size=25
field_metadata={'facet_type': 'SimpleFacet', 'metadata': {u'Sort': False, u'Search': False, u'MeasureType': u'None', u'DisplayName': u'Listing Agent', u'Description': u'Unique identifier for Contact associated with Property.', u'EdgeNGram': False, u'IsKey': False, u'ReferencesTo': [u'contact'], u'MixedSearchAlias': None, u'Facet': True, u'Result': True, u'LogicalName': u'awx_listingagentid.name', u'Type': u'EntityReferenceObject', u'LatitudeName': None, u'LongitudeName': None}}
---------------
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: POST
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/search/awx_property
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'25a905dede6f4f3599d0edad49031154', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
requests_api.py            104 DEBUG    Request body: {"ResultsFormat": null, "From": 0, "SelectedDateTimeFacets": null, "Relations": [], "PinTo": {"lat": -27.47018, "lon": 153.02911}, "NumericFacetFilters": [], "OrderBy": [{"Field": "_score", "IsDescending": "true"}], "GeoPolygonFilters": [], "TermFacetFilters": [], "FieldFilters": [], "GeoDistanceFacetFilters": [], "ScriptFilters": [], "Ids": [], "SelectedNumericFacets": null, "RelationCounts": [], "Options": null, "SelectedTermFacets": null, "DateTimeFacetFilters": [], "TermFacetSize": 25, "SelectedGeoFacets": null, "Query": "*", "Size": 25}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "POST /xre2113qa.nightly/api/search/awx_property HTTP/1.1" 200 44208
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:00.800000
test_facet_fields.py        71 INFO     Testing facet sample: None
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: POST
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/search/awx_property
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'25a905dede6f4f3599d0edad49031154', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
requests_api.py            104 DEBUG    Request body: {"ResultsFormat": null, "From": 0, "SelectedDateTimeFacets": null, "Relations": [], "PinTo": {"lat": -27.47018, "lon": 153.02911}, "NumericFacetFilters": [], "OrderBy": [{"Field": "_score", "IsDescending": "true"}], "GeoPolygonFilters": [], "TermFacetFilters": [{"Items": [null], "LogicalName": "awx_listingagentid.name"}], "FieldFilters": [], "GeoDistanceFacetFilters": [], "ScriptFilters": [], "Ids": [], "SelectedNumericFacets": null, "RelationCounts": [], "Options": null, "SelectedTermFacets": null, "DateTimeFacetFilters": [], "TermFacetSize": 25, "SelectedGeoFacets": null, "Query": "*", "Size": 5}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "POST /xre2113qa.nightly/api/search/awx_property HTTP/1.1" 200 19590
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:00.915000
test_facet_fields.py        95 DEBUG    Response Total value: 47
test_facet_fields.py        71 INFO     Testing facet sample: 1111 8888A
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: POST
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/search/awx_property
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'25a905dede6f4f3599d0edad49031154', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
requests_api.py            104 DEBUG    Request body: {"ResultsFormat": null, "From": 0, "SelectedDateTimeFacets": null, "Relations": [], "PinTo": {"lat": -27.47018, "lon": 153.02911}, "NumericFacetFilters": [], "OrderBy": [{"Field": "_score", "IsDescending": "true"}], "GeoPolygonFilters": [], "TermFacetFilters": [{"Items": ["1111 8888A"], "LogicalName": "awx_listingagentid.name"}], "FieldFilters": [], "GeoDistanceFacetFilters": [], "ScriptFilters": [], "Ids": [], "SelectedNumericFacets": null, "RelationCounts": [], "Options": null, "SelectedTermFacets": null, "DateTimeFacetFilters": [], "TermFacetSize": 25, "SelectedGeoFacets": null, "Query": "*", "Size": 5}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "POST /xre2113qa.nightly/api/search/awx_property HTTP/1.1" 200 14763
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:00.932000
test_facet_fields.py        95 DEBUG    Response Total value: 1
test_facet_fields.py       121 ERROR    assert '1111 8888A' == 'Sidney Higa (sample)'
  - 1111 8888A
  + Sidney Higa (sample)
Traceback (most recent call last):
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Tests\SimpleSearch\Facets\test_facet_fields.py", line 105, in test_entity_search_with_single_facet_filter
    field_metadata
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Implementation\Assertions\FacetAssertMixin.py", line 41, in assertSearchWithFacets
    es_client
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Implementation\Assertions\FacetAssertMixin.py", line 154, in assertFacetValueInSearchResult
    assert init_facet_value == result_facet_value
AssertionError: assert '1111 8888A' == 'Sidney Higa (sample)'
  - 1111 8888A
  + Sidney Higa (sample)
#########################Server error trace#########################
{"index":[],"megs":[]}
