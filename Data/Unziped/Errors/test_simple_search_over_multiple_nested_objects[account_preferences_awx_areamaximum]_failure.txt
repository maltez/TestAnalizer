#########################Automated tests trace#########################

self = <Search.Tests.NestedCollections.SearchOverNestedCollections.test_search_over_nested_collections.TestSearchOverMultipleNestedObjects object at 0x03E56990>
entity_with_test_field = <PyTest.InputTestCriteria.InputTestCriteria.EntityWithField object at 0x034B56F0>
search_api = <Search.Implementation.Contract.search.SearchAPI object at 0x03E565F0>

    @pytest.mark.xre_demo
    def test_simple_search_over_multiple_nested_objects(self, entity_with_test_field, search_api):
        if isinstance(entity_with_test_field, EntityWithField):
            test_entity = entity_with_test_field.entity_type
            fieldname = entity_with_test_field.field_name
            collection_name = entity_with_test_field.field_metadata["CollectionName"]
            collection_type = entity_with_test_field.field_metadata["Type"]
            collection_field_name = fieldname.replace("{0}.".format(collection_name), "")
            search_api.entity_name = test_entity
    
            self.logger.debug(entity_with_test_field.to_str_repr())
            try:
                custom_filter = {
                    "occur_type": "must",
                    "query": pyes.filters.ExistsFilter(collection_field_name)
                }
    
                random_entity = None
                try:
                    random_entity = self.es_client.get_entity_with_related_entities(
                        firstclass=test_entity,
                        secondclass=collection_type,
                        custom_query=None,
                        custom_filter=custom_filter
                    )
                    random_entity = self.es_client.get_entity_by_id(entity_id=random_entity[1])
                except Exception, e:
                    self.logger.exception(e)
    
                if not random_entity:
                    raise SkipTestException("There is no record in index with "
                                            "valid value for {0} field".format(fieldname))
    
                query = self._get_field_value_from_entity_details(
                    collection_field_name,
                    random_entity
                )
    
                assert random_entity,\
                    "The record with field {0} has not been found in the Index after 50 retries".format(fieldname)
    
                #Prepare query
                self.logger.info('Starting tests for field #{0}# ...'.format(fieldname))
    
                #Prepare request body
                field_filter = {
                    "LogicalNames": [fieldname],
                    "Query": encode_decode_value(query),
                    "MatchAll": True,
                    "PhrasePrefix": False
                }
    
                search_req_body = SearchRequest(
                    FieldFilters=[field_filter],
                    Size=5
                )
    
                #Search result
                #Send request
                res_code, res_text = search_api.send_search_request(
                    request_body=search_req_body.to_json(),
                )
    
                self.assertSearchResponse(
                    res_code,
                    res_text
                ) #Validate result
    
                search_response = SearchResponse(json.loads(res_text))
    
                #Count - total number of records in result
                count = len(search_response.results)
    
                if count <= 0:
                    assert False, "Empty search results received for valid search query value - {0} -".format(query)
                    #Actual count - number of records in the search response which contains query in the particular field
    
                self.assertSearchResultContainTargetNestedCollection(
                    search_response.results,
                    collection_name
                )
    
                for result in search_response.results:
                    for item in result.source[collection_name]:
                        self.assertSearchResultContainTestValue(
                            collection_field_name,
                            item,
                            query,
                            match_mode="RelevancePrefix"
                        )
            except SkipTestException, e:
                self.logger.exception(e)
                pytest.skip(e.message)
            except AssertionError, e:
                self.logger.exception(e)
                pytest.fail("Search over nested collection not working for {0}. Inner assertion: {1}".format(
                    str(entity_with_test_field),
>                   e.message
                ))
E               Failed: Search over nested collection not working for account__preferences.awx_areamaximum. Inner assertion: Empty search results received for valid search query value - 108486.762112 -

C:\EdgeDeployment\FunctionalTests\src\Search\Tests\NestedCollections\SearchOverNestedCollections\test_search_over_nested_collections.py:153: Failed
-------------------------------- Captured log ---------------------------------
test_search_over_nested_collections.py   54 INFO     
Starting test: test_simple_search_over_multiple_nested_objects
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: GET
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/authentication
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'25a905dede6f4f3599d0edad49031154', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "GET /xre2113qa.nightly/api/authentication HTTP/1.1" 200 2097
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:00.487000
test_search_over_nested_collections.py   66 DEBUG    
---Input data---
test_entity_type=account
field_name=preferences.awx_areamaximum
term_facet_size=None
field_metadata={'CollectionName': u'preferences', 'Type': u'awx_preference'}
---------------
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly.settings/ValueWithVersion%601/awx_preference HTTP/1.1" 200 9325
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly/_search HTTP/1.1" 200 123
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly.settings/ValueWithVersion%601/awx_preference HTTP/1.1" 200 9325
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly/_search HTTP/1.1" 200 1891
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly/_search HTTP/1.1" 200 3810
connectionpool.py          296 DEBUG    "GET /xre2113qa.nightly/_search HTTP/1.1" 200 1878
test_search_over_nested_collections.py   98 INFO     Starting tests for field #preferences.awx_areamaximum# ...
requests_api.py             76 INFO     Sending HTTP request...
requests_api.py             83 DEBUG    Method type: POST
requests_api.py             94 DEBUG    Url: http://localhost/xre2113qa.nightly/api/search/account
requests_api.py             95 DEBUG    Headers: {'Authorization-Token': u'25a905dede6f4f3599d0edad49031154', 'Accept-Language': 'en-US,en;q=0.8', 'Content-Type': 'application/json', 'Accept-Encoding': 'deflate, gzip'}
requests_api.py            104 DEBUG    Request body: {"ResultsFormat": null, "From": 0, "SelectedDateTimeFacets": null, "Relations": [], "PinTo": {"lat": -27.47018, "lon": 153.02911}, "NumericFacetFilters": [], "OrderBy": [{"Field": "_score", "IsDescending": "true"}], "GeoPolygonFilters": [], "TermFacetFilters": [], "FieldFilters": [{"MatchAll": true, "Query": "108486.762112", "PhrasePrefix": false, "LogicalNames": ["preferences.awx_areamaximum"]}], "GeoDistanceFacetFilters": [], "ScriptFilters": [], "Ids": [], "SelectedNumericFacets": null, "RelationCounts": [], "Options": null, "SelectedTermFacets": null, "DateTimeFacetFilters": [], "TermFacetSize": 25, "SelectedGeoFacets": null, "Query": "*", "Size": 5}
connectionpool.py          176 INFO     Starting new HTTP connection (1): localhost
connectionpool.py          344 DEBUG    "POST /xre2113qa.nightly/api/search/account HTTP/1.1" 200 13149
requests_api.py            140 INFO     Response recieved...
requests_api.py            141 INFO     Response status: 200
requests_api.py            142 INFO     Response reason: OK
requests_api.py            143 INFO     Response time: 0:00:01.522000
test_search_over_nested_collections.py  150 ERROR    Empty search results received for valid search query value - 108486.762112 -
Traceback (most recent call last):
  File "C:\EdgeDeployment\FunctionalTests\src\Search\Tests\NestedCollections\SearchOverNestedCollections\test_search_over_nested_collections.py", line 130, in test_simple_search_over_multiple_nested_objects
    assert False, "Empty search results received for valid search query value - {0} -".format(query)
AssertionError: Empty search results received for valid search query value - 108486.762112 -
#########################Server error trace#########################
{"index":[],"megs":[]}
